<?php

/**
 * functionality that deals with cms_webcams tables
 * @package webcams
 */

/**
 * gets a webcam url given its record
 * @param array $webcamInfo the cms_webcams record
 * @return string the wecam url
 */
//CODE NOT USED - COMMENTS BY KHADRA 
//function webcamToUrl($webcamInfo) {
//    $url = remove_accents($webcamInfo['name']);
//    //$url = strtolower( $url );
//    $url = str_replace(' ', '-', $url);
//    $url = preg_replace('/[^a-z0-9A-Z\-]/', '', $url);
//    $url = str_replace('--', '-', $url);
//
//    $url = substr($url, 0, 80);
//
//    if ($url[strlen($url) - 1] != '-')
//        $url = $url . '-';
//
//    $url = $url . $webcamInfo['id'];
//
//    return $url;
//}

/**
 * gets a webcam record given its url
 * @param string $url
 * @return array|false the cms_webcams record or false if none found
 */
function webcamFromUrl($url) {
    global $dbConn;
    $params = array();
    $query = "SELECT * FROM cms_webcams WHERE url=:Url AND state <> 0";
    $params[] = array(  "key" => ":Url",
                        "value" =>$url);
    $select = $dbConn->prepare($query);
    PDO_BIND_PARAM($select,$params);
    $res = $select->execute();

    $ret    = $select->rowCount();
    

    if (!$res || ($ret == 0))
        return false;

    $row = $select->fetch(PDO::FETCH_ASSOC);
    return $row;
}

/**
 * increment the views of a webcam
 * @param integer $id the cms_webcams record
 * @return boolean true|false if success fail
 */
function webcamIncViews($id) {
    global $dbConn;
	$params = array();
    $query = "UPDATE cms_webcams SET nb_views=nb_views+1 WHERE id=:Id";
    $params[] = array(  "key" => ":Id",
                        "value" =>intval($id));
    $update = $dbConn->prepare($query);
    PDO_BIND_PARAM($update,$params);
    $res = $update->execute();
    return $res;
}

/**
 * returns the webcam url for a webcam
 * @param array $webcamInfo the cms_webcams record
 * @return string the video's uri
 */
function ReturnWebcamUri($webcamInfo) {
    return ReturnLink('live-cam/' . $webcamInfo['url']);
}

/**
 * echos the uri generated by ReturnWebcamUri
 * @param array $webcamInfo the cms_webcams record
 */
function GetWebcamUri($webcamInfo) {
    echo ReturnWebcamUri($webcamInfo);
}

/**
 * gets the webcam (media actually) rating for a user
 * @param integer $wid the cms_webcam record id
 * @param integer $uid the cms_user record id
 * @return false|array false if the user hasnt rated a video or the rating array
 */
function webcamUserRatingGet($wid, $uid) {
    return socialRateGet($uid, $wid, SOCIAL_ENTITY_WEBCAM);
}

/**
 * sets a users's rating for a webcam (media actually)
 * @param integer $vid the cms_video record id
 * @param integer $uid the cms_user record id
 * @param integer $rating the user's rating
 * @return boolean true|false if array|fail
 */
function webcamUserRatingSet($vid, $uid, $user_rating) {
    if (!webcamUserRatingGet($vid, $uid)) {
        return socialRateAdd($uid, $vid, SOCIAL_ENTITY_WEBCAM, $user_rating, null);
    } else {
        return socialRateEdit($uid, $vid, SOCIAL_ENTITY_WEBCAM, $user_rating);
    }
}

/**
 * returns a webcams's comments
 * @param integer $vid the webcam ID
 * @param integer $nlimit the maximum  umber of comment record to return
 * @param integer $page number of pages of comment records to skip
 * @param string $sortby column name to sort by
 * @param string $sort ascending or descending sort 'ASC' | 'DESC'
 * @return mixed array of the video's comment records or false if none found
 */
// CODE NOT USED - commented by KHADRA
//function webcamGetComments($vid, $nlimit = 5, $page = 0, $sortby = 'comment_date', $sort = 'DESC') {
//    $order = ($sort == 'DESC') ? 'd' : 'a';
//    return socialCommentsGet(array('limit' => $nlimit, 'page' => $page, 'entity_id' => $vid, 'entity_type' => SOCIAL_ENTITY_WEBCAM, 'orderby' => $sortby, 'order' => $order));
//}

/**
 * gets the number of comments associated with a webcam
 * @param integer $vid the video to be queried for number of comments
 * @return integer the number of comments
 */
// CODE NOT USED - commented by KHADRA
//function webcamGetCommentNumber($vid) {
//    return socialCommentsGet(array('entity_id' => $vid, 'entity_type' => SOCIAL_ENTITY_WEBCAM, 'n_results' => true));
//}

/**
 * Return the number of coments per page on the video page
 * @return int the number of comments per page
 */
// CODE NOT USED - commented by KHADRA
//function webcamGetCommentsPerPage() {
//    return 5;
//}

/**
 * search for webcams given certain options. options include:<br/>
 * <b>limit</b>: the maximum number of media records returned. default 6<br/>
 * <b>page</b>: the number of pages to skip. default 0<br/>
 * <b>orderby</b>: the order to base the result on. values include any column of table. default 'id'<br/>
 * <b>order</b>: (a)scending or (d)escending. default 'a'<br/>
 * <b>latitude</b>: the latitude of the location to search within<br/>
 * <b>longitude</b>: the logitude of the location to search within<br/>
 * <b>radius</b>: the radius to search within (in meters)<br/>
 * <b>dist_alg</b>: the distance algorithm to use (s)quare [faster], or (c)ircular [slower]. default is 's'<br/>
 * <b>search_string</b>: the string to search for. could be space separated. no default<br/>
 * <b>search_where</b>: where to search for the string (n)ame, (d)escription, (a)ll, or a comma separated combination. default is 'a'<br/>
 * <b>location_id<b/>: the location_id to search for.<br/>
 * <b>city_id<b/>: the city_id to search for.<br/>
 * <b>n_results</b>: gets the number of results rather than the rows. default false.
 * @param array $srch_options. the search options
 * @return array a number of media records
 */
function webcamSearch($srch_options) {


	global $dbConn;
	$params = array();  

    $default_opts = array(
        'limit' => 6,
        'page' => 0,
        'orderby' => 'id',
        'order' => 'a',
        'latitude' => null,
        'longitude' => null,
        'radius' => 1000,
        'dist_alg' => 's',
        'search_string' => null,
        'search_string2' => null,
        'country_code' => null,
        'continent_code' => null,
        'city_id' => null,
        'state_code' => null,
        'search_where' => 'a',
        'location_id' => null,
        'n_results' => false,
        'favorite' => false,
        'userid' => null,
    );

    $options = array_merge($default_opts, $srch_options);

    /* no trends from search queries
      if($options['search_string'] !== null)
      queryAdd($options['search_string']);
     */

    $nlimit = intval($options['limit']);
    $skip = intval($options['page']) * $nlimit;

    $where = '';

    if ($where != '')
        $where .= ' AND ';
    $where .= " W.state=1 ";

    if (!is_null($options['city_id'])) {
        if ($where != '') $where .= ' AND ';
        $city_id = intval($options['city_id']);
//        $where .= " W.city_id=$city_id ";
        $where .= " W.city_id=:City_id ";
	$params[] = array(  "key" => ":City_id", "value" =>$city_id);
    }

    if (!is_null($options['location_id'])) {
        if ($where != '')
            $where .= ' AND ';
//        $where .= " W.location_id={$options['location_id']} ";
        $where .= " W.location_id= :Location_id ";
	$params[] = array(  "key" => ":Location_id", "value" =>$options['location_id']);
    }
//to be fixed
    if (!is_null($options['latitude']) && !is_null($options['longitude']) && !is_null($options['radius'])) {
        $lat = doubleval($options['latitude']);
        $long = doubleval($options['longitude']);
        $radius = intval($options['radius']);

        if ($where != '')
            $where .= ' AND ';

        if ($options['dist_alg'] == 's') {
            $long_rad = deg2rad($long);
            $c = 40075;

            $lat_conv = doubleval(110000.0);
            $long_conv = (1000 * $c * cos($long_rad)) / 360;

            $diff_lat = $radius / $lat_conv;
            $diff_long = $radius / $long_conv;

//            $where .= " squareLocationDiff(W.latitude,W.longitude,$lat,$long,$diff_lat,$diff_long) ";
            $where .= " squareLocationDiff(W.latitude,W.longitude,:Lat,:Long,:Diff_lat,:Diff_long) ";
            $params[] = array(  "key" => ":Lat", "value" =>$lat);
            $params[] = array(  "key" => ":Long", "value" =>$long);
            $params[] = array(  "key" => ":Diff_lat", "value" =>$diff_lat);
            $params[] = array(  "key" => ":Diff_long", "value" =>$diff_long);
        } else {
            $where .= " LocationDIff(W.latitude,W.longitude,:Lat,:Long) <= :Radius ";
            $params[] = array(  "key" => ":Lat", "value" =>$lat);
            $params[] = array(  "key" => ":Long", "value" =>$long);
            $params[] = array(  "key" => ":Radius", "value" =>$radius);
        }
    }

    if (!is_null($options['userid']) && $options['favorite'] == true) {
        if ($where != '')
            $where .= ' AND ';
//        $where .= " W.id IN (SELECT entity_id FROM cms_social_favorites WHERE user_id={$options['userid']} AND entity_type='" . SOCIAL_ENTITY_WEBCAM . "' ) ";
        $where .= " W.id IN (SELECT entity_id FROM cms_social_favorites WHERE user_id=:Userid AND entity_type='" . SOCIAL_ENTITY_WEBCAM . "' ) ";
            $params[] = array(  "key" => ":Userid", "value" =>$options['userid']);
    }

    $searched = array();
    $searched2 = array();

    if (!is_null($options['search_string'])) {
        $search_strings = explode(' ', $options['search_string']);
        $search_where = explode(',', $options['search_where']);
        $i=0;
        foreach ($search_strings as $in_search_string) {

            $search_string = trim(strtolower($in_search_string));
            $search_string = preg_replace('/[^a-z0-9A-Z]/', '', $search_string);

            if (strlen($search_string) <= 1)
                continue;

            if (in_array($search_string, $searched))
                continue;

            $mini_like = array();
            if (in_array('a', $search_where) || in_array('n', $search_where)) {
                $mini_like[] = " LOWER(W.name) LIKE :Search_str$i ";
            }

            if (in_array('a', $search_where) || in_array('d', $search_where)) {
                $mini_like[] = " LOWER(W.description) LIKE :Search_str$i ";
            }
            $params[] = array(  "key" => ":Search_str".$i, "value" =>'%'.$search_string.'%');
            if( sizeof($mini_like)>0 ){
                $searched[] = implode(' OR ', $mini_like);
            }
            $i++;
        }
        if( sizeof($searched)>0 ){
            $all_words = implode(" OR ", $searched);
            if ($where != '')
                $where .= ' AND ';
            $where .= " ( $all_words ) ";
        }
    }
    if (!is_null($options['search_string2'])) {
        $search_strings = $options['search_string2'];
        $search_where = explode(',', $options['search_where']);

        $search_string = trim(strtolower($search_strings));
        $search_string = preg_replace('/[^a-z0-9A-Z]/', '', $search_string);

        $mini_like = array();
        if (in_array('a', $search_where) || in_array('n', $search_where)) {
            $mini_like[] = " md5(LOWER(W.name)) LIKE :Search_string ";
        }

        if (in_array('a', $search_where) || in_array('d', $search_where)) {
            $mini_like[] = " md5(LOWER(W.description)) LIKE :Search_string ";
        }
        $params[] = array(  "key" => ":Search_string", "value" =>'%'.$search_string.'%');
        if( sizeof($mini_like)>0 ){
            $searched2[] = implode(' OR ', $mini_like);
            $all_words = implode(" OR ", $searched2);
            if ($where != '') $where .= ' AND ';
            $where .= " ( $all_words ) ";
        }
    }

    $orderby = $options['orderby'];
    if ($orderby == 'rand') {
        $orderby = "RAND()";
    } else {
        $order = ($options['order'] == 'a') ? 'ASC' : 'DESC';
    }

    if ($options['n_results'] == false) {
        $query = "SELECT * FROM `cms_webcams` AS W ";        
        if(!is_null($options['country_code'])){
//           $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id AND C.country_code='{$options['country_code']}' "; 
            $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id AND C.country_code= :Country_code "; 
            $params[] = array(  "key" => ":Country_code", "value" =>$options['country_code']);
           if(!is_null($options['state_code'])){
//               $query .= "AND C.state_code='{$options['state_code']}' "; 
               $query .= "AND C.state_code=:State_code "; 
            $params[] = array(  "key" => ":State_code", "value" =>$options['state_code']);
           }
        }else if(!is_null($options['continent_code'])){
//           $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id INNER JOIN cms_countries AS CO ON CO.code=C.country_code AND CO.continent_code='{$options['continent_code']}' ";           
            $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id INNER JOIN cms_countries AS CO ON CO.code=C.country_code AND CO.continent_code=:Continent_code ";
            $params[] = array(  "key" => ":Continent_code", "value" =>$options['continent_code']);
        }
//        $query .= "WHERE $where ORDER BY $orderby $order LIMIT $skip, $nlimit";
        $query .= "WHERE $where ORDER BY $orderby $order LIMIT :Skip, :Nlimit";
        $params[] = array(  "key" => ":Skip", "value" =>$skip, "type" =>"::PARAM_INT");
        $params[] = array(  "key" => ":Nlimit", "value" =>$nlimit, "type" =>"::PARAM_INT");        
        
	$select = $dbConn->prepare($query);
	PDO_BIND_PARAM($select,$params);
	$select->execute();
        $media = $select->fetchAll();
//        while ($row = db_fetch_array($ret))
//            $media[] = $row;
        return $media;
    } else {
        $query = "SELECT COUNT(W.id) FROM `cms_webcams` AS W ";
        if(!is_null($options['country_code'])){
//           $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id AND C.country_code='{$options['country_code']}' "; 
            $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id AND C.country_code=:Country_code "; 
            $params[] = array(  "key" => ":Country_code",
                                "value" =>$options['country_code']);
           if(!is_null($options['state_code'])){
//               $query .= "AND C.state_code='{$options['state_code']}' "; 
               $query .= "AND C.state_code=:State_code "; 
            $params[] = array(  "key" => ":State_code",
                                "value" =>$options['state_code']);
           }
        }else if(!is_null($options['continent_code'])){
//           $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id INNER JOIN cms_countries AS CO ON CO.code=C.country_code AND CO.continent_code='{$options['continent_code']}' ";           
            $query .= "INNER JOIN webgeocities AS C ON C.id=W.city_id INNER JOIN cms_countries AS CO ON CO.code=C.country_code AND CO.continent_code=:Continent_code "; 
            $params[] = array(  "key" => ":Continent_code",
                                "value" =>$options['continent_code']);
        }
        $query .= "WHERE $where";
        
//        $ret = db_query($query);
//        $row = db_fetch_array($ret);
	$select = $dbConn->prepare($query);
	PDO_BIND_PARAM($select,$params);
	$select->execute();

	$ret    = $select->rowCount();
        $row = $select->fetch();
        
        return $row[0];
    }
}

/**
 * gets a users vote of a webcam
 * @param integer $vid the webcam id
 * @param integer $user_id the user id
 * @return integer|fasle the users like/dislike or fasle if not votes
 */
function webcamVoted($vid, $user_id) {
    return socialLiked($user_id, $vid, SOCIAL_ENTITY_WEBCAM);
}

/**
 * Vote a video up or down
 * @param type $vid the webcam being voted
 * @param type $user_id the user voting
 * @param type $up_down like (1) or dislike (-1)
 */
function webcamVote($vid, $user_id, $up_down) {
    //user can only have one vote
    if (socialLiked($user_id, $vid, SOCIAL_ENTITY_WEBCAM)) {
        $ret = socialLikeEdit($user_id, $vid, SOCIAL_ENTITY_WEBCAM, $up_down);
    } else {
        $ret = socialLikeAdd($user_id, $vid, SOCIAL_ENTITY_WEBCAM, $up_down, null);
    }

    if ($ret == false)
        return false;

    return true;
}

/**
 * checks if a user has favorited a webcam
 * @param integer $vid the webcam id
 * @param integer $user_id the user id
 * @return boolean true|false if success|fail
 */
function webcamFavorited($vid, $user_id) {
    //user can only have one vote
    return socialFavoriteAdded($user_id, $vid, SOCIAL_ENTITY_WEBCAM);
}

/**
 * makes a webcam a favorite
 * @param integer $vid the webcam id
 * @param integer $user_id the user id
 * @return boolean true|false if success|fail
 */
function webcamFavorite($vid, $user_id) {
    return socialFavoriteAdd($user_id, $vid, SOCIAL_ENTITY_WEBCAM, null);
}

/**
 * makes a webcam unfavorited
 * @param integer $vid the webcam id
 * @param integer $user_id the user id
 * @return boolean true|false if success|fail
 */
function webcamFavoriteDelete($vid, $user_id) {
    return socialFavoriteDelete($user_id, $vid, SOCIAL_ENTITY_WEBCAM);
}

/**
 * gets the info of a webcam
 * @param integer $id the cms_webcams id
 * @return array
 */
function webcamGetInfo($id) {
    global $dbConn;
    $params = array();
    $webcamGetInfo = tt_global_get('webcamGetInfo');
            
    if(isset($webcamGetInfo[$id]) && $webcamGetInfo[$id]!='')
        return $webcamGetInfo[$id];  // Added by Devendra
//    $query = "SELECT * FROM cms_webcams WHERE id='$id'";
//    $res = db_query($query);
//    if (!$res || (db_num_rows($res) == 0)) {
//        return false;
//    } else {
//        return db_fetch_assoc($res);
//    }
//    $query = "SELECT * FROM cms_webcams WHERE id=:Id";   //Hide by Devendra
    $query = "SELECT `id`, `name`, `url`, `description`, `location_id`, `latitude`, `longitude`, `live_url`, `still_url`, `state`, `city_id`, `nb_views`, `like_value`, `rating`, `nb_ratings`, `nb_shares`, `nb_comments`, `can_comment`, `can_share`, `can_rate`, `can_like` FROM `cms_webcams` WHERE id=:Id";  //Added by Devendra
    $params[] = array(  "key" => ":Id","value" =>$id);
    $select = $dbConn->prepare($query);
    PDO_BIND_PARAM($select,$params);
    $res = $select->execute();

    $ret    = $select->rowCount();
    
    if (!$res || ($ret == 0)) {
        $webcamGetInfo  =   false;
        return false;
    } else {
        $row = $select->fetch(PDO::FETCH_ASSOC);
        $webcamGetInfo  =   $row;
        return $row;
    }

}

/**
 * gets suggested live cams - in the same city
 * @param integer $currentCamId the id of the live cam
 * @param integer $cityId the id of the city to seach for live cams inside
 * @return array or false
 */
function getSuggestedLiveCam($currentCamId,$cityId){


    global $dbConn;
	$params = array();  
//    $query = "SELECT * FROM cms_webcams WHERE city_id='$cityId' AND state = 1 AND id <> $currentCamId limit 0,4";
////    exit($query);
//    $res = db_query($query);
//    $media = array();
//    if (!$res || (db_num_rows($res) == 0)){
//        return false;
//    }else{
//        while ($row = db_fetch_array($res)){
//            $media[] = $row;
//        }
//        return $media;
//    }
    $query = "SELECT * FROM cms_webcams WHERE city_id=:CityId AND state = 1 AND id <> :CurrentCamId limit 0,4";
	$params[] = array(  "key" => ":CityId",
                            "value" =>$cityId);
	$params[] = array(  "key" => ":CurrentCamId",
                            "value" =>$currentCamId);
    $select = $dbConn->prepare($query);
    PDO_BIND_PARAM($select,$params);
    $res = $select->execute();

    $ret    = $select->rowCount();
    
    $media = array();
    if (!$res || ($ret == 0)){
        return false;
    }else{
        $media = $select->fetchAll();
        return $media;
    }



}
