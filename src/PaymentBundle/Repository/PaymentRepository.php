<?php

namespace PaymentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use PaymentBundle\Entity\PaymentTransactionFeedback;
use PaymentBundle\Entity\Payment;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
final class PaymentRepository extends BaseRepository
{

    /**
     * @param $uuid
     * @return null|object
     */
    public function findByUuid($uuid)
    {
        return $this->findOneBy([
                'uuid' => $uuid
        ]);
    }

    public function findByFortId($fortId)
    {
        return $this->findOneBy([
                'fortId' => $fortId
        ]);
    }

    /**
     * Create a new record to the payment_transaction_feedback table
     * @return Object PaymentTransactionFeedback
     */
    function createPaymentTransactionFeedback(Payment $payment, array $param)
    {

        $transactionFeedback = new PaymentTransactionFeedback();
        $transactionFeedback->setPayment($payment);
        $transactionFeedback->setCommand($param['command']);
        $transactionFeedback->setMerchantReference($param['merchant_reference']);
        $transactionFeedback->setCustomerIp(isset($param['customer_ip']) ? $param['customer_ip'] : $_SERVER['REMOTE_ADDR'] );
        $transactionFeedback->setStatus($param['status']);
        $transactionFeedback->setResponseCode($param['response_code']);
        $transactionFeedback->setResponseMessage($param['response_message']);
        $transactionFeedback->setCreationDate(new \DateTime());

        if (isset($param['fort_id'])) {
            $transactionFeedback->setFortId($param['fort_id']);
        }

        if (isset($param['token_name'])) {
            $transactionFeedback->setTokenName($param['token_name']);
        }

        if (isset($param['eci'])) {
            $transactionFeedback->setEci($param['eci']);
        }

        if (isset($param['customer_email'])) {
            $transactionFeedback->setCustomerEmail($param['customer_email']);
        }

        if (isset($param['currency'])) {
            $transactionFeedback->setCurrency($param['currency']);
        }

        if (isset($param['amount'])) {
            $transactionFeedback->setAmount($param['amount']);
        }

        if (isset($param['payment_option'])) {
            $transactionFeedback->setPaymentOption($param['payment_option']);
        }

        return $this->save($transactionFeedback);
    }

    function getPhoneNumber($parameters)
    {

        $query = $this->createQueryBuilder('al')
            ->select('al.uuid as id, deals.dialingCode as dealsDialingCode, deals.mobilePhone as dealsMobilePhone, hotels.dialingCode as hotelsDialingCode, hotels.mobile as hotelsMobilePhone, flights.mobileCountryCode as flightsDialingCode, flights.mobile as flightsMobilePhone')
            ->leftJoin('DealBundle:DealBooking', 'deals', 'WITH', "deals.id = al.moduleTransactionId and al.moduleId = :dealsModule")
            ->leftJoin('HotelBundle:HotelReservation', 'hotels', 'WITH', "hotels.id = al.moduleTransactionId and al.moduleId = :hotelsModule")
            ->leftJoin('FlightBundle:PassengerNameRecord', 'flights', 'WITH', "flights.id = al.moduleTransactionId and al.moduleId = :flightsModule")
            ->where('al.moduleTransactionId = :moduleTransId')
            ->andwhere('al.uuid = :uuid')
            ->setParameter(':dealsModule', $parameters['deals_module_id'])
            ->setParameter(':hotelsModule', $parameters['hotels_module_id'])
            ->setParameter(':flightsModule', $parameters['flights_module_id'])
            ->setParameter(':moduleTransId', $parameters['module_transaction_id'])
            ->setParameter(':uuid', $parameters['uuid']);

        $quer   = $query->getQuery();
        $result = $quer->getResult();
        if (!empty($result) && isset($result[0])) {
            return $result;
        } else {
            return array();
        }
    }

    /**
     * Payment Details - Get payment attempt count of a uuid
     *
     * @param  String $uuid The payment uuid
     * @return integer
     */
    function getPaymentAttemptCount($uuid)
    {
        $query = $this->createQueryBuilder('pd')
            ->select('count(pd.id)')
            ->where('pd.uuid = :uuid')
            ->setParameter(':uuid', $uuid)
            ->getQuery();

        $count = $query->getSingleScalarResult();

        return $count;
    }

    /**
     * Payment Details - Get latest payment attempt details
     *
     * @param  String $uuid The payment uuid
     * @return Object PaymentDetails
     */
    function getLatestPaymentAttempt($uuid)
    {
        $query = $this->createQueryBuilder('pd')
            ->where('pd.uuid = :uuid')
            ->setParameter(':uuid', $uuid)
            ->orderBy('pd.createdAt', 'DESC')
            ->getQuery();

        $result = $query->getResult();

        if (!empty($result) && isset($result[0])) {
            return $result[0];
        } else {
            return false;
        }
    }
}
